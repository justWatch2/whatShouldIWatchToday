<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="avengers.waffle.mapper.FriendMapper">
    <select id="getFriendsInfoByMemberIdFromMovies" resultType="avengers.waffle.VO.recommendFriends.RecommendFriendsInfoDTO">
        with view AS (SELECT
        mm.member_name AS name,
        COUNT(DISTINCT mv.movies_id) AS numViewedMovie,
        mm.img_url AS icon
        FROM member mm
            left JOIN movie_viewlist mv ON mv.member_id = mm.member_id
        WHERE mm.member_id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
        GROUP BY mm.member_id
        ),
        wish AS(
            SELECT
            mm.member_name AS name,
            COUNT(DISTINCT mw.movies_id) AS numWish,
            mm.img_url AS icon
            FROM member mm
                left JOIN movie_wishlist mw ON mw.member_id = mm.member_id
            WHERE mm.member_id IN
            <foreach item="id" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
            GROUP BY mm.member_id
        )
        select wish.name AS name,
                wish.numWish AS numWish,
                view.numViewedMovie AS numViewedMovie,
                wish.icon AS icon
        from  wish
            join view on view.name = wish.name
        ORDER BY numWish DESC, numViewedMovie DESC

    </select>

    <select id="getFriendsInfoByMemberIdFromTvshow" resultType="avengers.waffle.VO.recommendFriends.RecommendFriendsInfoDTO">
        with view AS (
            SELECT
            mm.member_name AS name,
            COUNT(DISTINCT tv.tv_shows_id) AS numViewedMovie,
            mm.img_url AS icon
            FROM member mm
                left JOIN tvshow_viewlist tv ON tv.member_id = mm.member_id
            WHERE mm.member_id IN
            <foreach item="id" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
            GROUP BY mm.member_id
        ),
        wish AS(
            SELECT
            mm.member_name AS name,
            COUNT(DISTINCT tw.tv_shows_id) AS numWish,
            mm.img_url AS icon
            FROM member mm
                left JOIN tvshow_wishlist tw ON tw.member_id = mm.member_id
            WHERE mm.member_id IN
            <foreach item="id" collection="list" open="(" separator="," close=")">
                #{id}
            </foreach>
            GROUP BY mm.member_id
        )
        select wish.name AS name,
            wish.numWish AS numWish,
            view.numViewedMovie AS numViewedMovie,
            wish.icon AS icon
        from  wish
            join view on view.name = wish.name
        ORDER BY numWish DESC, numViewedMovie DESC

    </select>

    <sql id="keywordLimit">
        20
    </sql>

    <sql id="numIncludeKeywords">
        1
    </sql>

    <sql id="recommendTypeForMovie">
        <choose>
            <when test="recommendType == 1">
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_movie
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <when test="recommendType == 2">
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_movie kcm
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
                    and kcm.view_keyword_count IS NULL
            </when>
            <otherwise>
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_movie kcm
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
                    and kcm.wish_keyword_count IS NULL
            </otherwise>
        </choose>
    </sql>

    <!--영화  추천 (개인추천 + 친구추가 추천)  -->
    <select id="getRecommendMovieByMemberIds" resultType="avengers.waffle.VO.recommendFriends.RecommendInfoDTO">

        WITH combined AS (
            <include refid="recommendTypeForMovie"/>
        ),

        top_keywords AS (
        SELECT member_id, keywords_id, total_count
        FROM (SELECT member_id, keywords_id, SUM(keyword_count) AS total_count,
            ROW_NUMBER () OVER (PARTITION BY member_id ORDER BY SUM(keyword_count) DESC ) AS rn
        FROM combined
        GROUP BY member_id, keywords_id) as dd
        WHERE rn &lt;= <include refid="keywordLimit"/>
        ),

        movies_with_keywords AS (
        -- 이 키워드들을 2개 이상 포함한 영화만 추출
        SELECT  mk.movies_id AS movie_id, COUNT(mk.keywords_id) AS match_count
        FROM movie_keywords mk
        JOIN top_keywords tk ON mk.keywords_id = tk.keywords_id
        GROUP BY mk.movies_id
        HAVING COUNT( mk.keywords_id) >= <include refid="numIncludeKeywords"/>
        )

        SELECT DISTINCT m.id AS movieId,
        m.title,
        m.poster_path AS poster,
        r.averageRating AS rating,
        m.overview AS description,
        m.keywords AS keywordsRaw,
        mwk.match_count AS keywordsRanking
        FROM movies_with_keywords mwk
            JOIN movies m ON mwk.movie_id = m.id
            JOIN ratings r ON r.tconst = m.imdb_id
            JOIN titles_adult ta ON m.imdb_id = ta.tconst
        WHERE  m.id NOT IN (
            SELECT movies_id
            FROM movie_viewlist
            WHERE member_id IN
            <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                #{id}
            </foreach>
        )
        and ta.is_adult = 0 AND m.poster_path != '' AND m.overview != ''
        order by mwk.match_count DESC
        limit 500;

    </select>

    <!-- TVshow 추천 타입 세팅-->
    <sql id="recommendTypeForTvShow">
        <choose>
            <when test="recommendType == 1">
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_tv
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <when test="recommendType == 2">
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_tv kct
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
                and kct.view_keyword_count IS NULL
            </when>
            <otherwise>
                SELECT member_id, keywords_id, keyword_count
                FROM keyword_count_tv kct
                WHERE member_id IN
                <foreach item="id" collection="memberIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
                and kct.wish_keyword_count IS NULL
            </otherwise>
        </choose>
    </sql>

    <!-- tvshow  추천   -->
    <select id="getRecommendTvShowByMemberIds" resultType="avengers.waffle.VO.recommendFriends.RecommendInfoDTO">

        WITH combined AS (
            <include refid="recommendTypeForTvShow"/>
        ),

        top_keywords AS (
        SELECT member_id, keywords_id, total_count
        FROM (SELECT member_id, keywords_id, SUM(keyword_count) AS total_count,
        ROW_NUMBER () OVER (PARTITION BY member_id ORDER BY SUM(keyword_count) DESC ) AS rn
        FROM combined
        GROUP BY member_id, keywords_id) as dd
        WHERE rn &lt;= <include refid="keywordLimit"/>
        ),

        tvshows_with_keywords AS (
        -- 이 키워드들을 2개 이상 포함한 드라만 추출
        SELECT  tk.tv_shows_id AS tvShow_id, COUNT(tk.keywords_id) AS match_count
        FROM tv_keywords tk
        JOIN top_keywords topk ON tk.keywords_id = topk.keywords_id
        GROUP BY tk.tv_shows_id
        HAVING COUNT( tk.keywords_id) >= <include refid="numIncludeKeywords"/>
        )

        SELECT DISTINCT tv.id AS tvShowId,
        tv.name AS title,
        tv.poster_path AS poster,
        tv.vote_average AS rating,
        tv.overview AS description,
        tv.keywords AS keywordsRaw,
        twk.match_count AS keywordsRanking
        FROM tvshows_with_keywords twk
            JOIN tvshows tv ON twk.tvShow_id = tv.id
        WHERE  tv.id NOT IN (
            SELECT tv_shows_id
            FROM tvshow_viewlist
            WHERE member_id IN
            <foreach item="id" collection="memberIds" open="(" separator="," close=")">
             #{id}
            </foreach>
        )
        AND tv.poster_path != ''
        order by twk.match_count DESC
        limit 500;

    </select>


</mapper>
